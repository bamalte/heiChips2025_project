
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.54 (git sha1 db72ec3bde296a9512b2d1e6fabf81cfb07c2c1b, clang++ 19.1.7 -fPIC -O3)

1. Executing Verilog-2005 frontend: /home/user/Documents/heiChips2025_project/sap_1/heichips25-template/librelane/runs/RUN_2025-08-07_17-25-14/tmp/037f80c261c04dbb88ee5475146701c6.bb.v
Parsing SystemVerilog input from `/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/librelane/runs/RUN_2025-08-07_17-25-14/tmp/037f80c261c04dbb88ee5475146701c6.bb.v' to AST representation.
Generating RTLIL representation for module `\sg13g2_a21o_1'.
Generating RTLIL representation for module `\sg13g2_a21o_2'.
Generating RTLIL representation for module `\sg13g2_a21oi_1'.
Generating RTLIL representation for module `\sg13g2_a21oi_2'.
Generating RTLIL representation for module `\sg13g2_a221oi_1'.
Generating RTLIL representation for module `\sg13g2_a22oi_1'.
Generating RTLIL representation for module `\sg13g2_and2_1'.
Generating RTLIL representation for module `\sg13g2_and2_2'.
Generating RTLIL representation for module `\sg13g2_and3_1'.
Generating RTLIL representation for module `\sg13g2_and3_2'.
Generating RTLIL representation for module `\sg13g2_and4_1'.
Generating RTLIL representation for module `\sg13g2_and4_2'.
Generating RTLIL representation for module `\sg13g2_antennanp'.
Generating RTLIL representation for module `\sg13g2_buf_1'.
Generating RTLIL representation for module `\sg13g2_buf_16'.
Generating RTLIL representation for module `\sg13g2_buf_2'.
Generating RTLIL representation for module `\sg13g2_buf_4'.
Generating RTLIL representation for module `\sg13g2_buf_8'.
Generating RTLIL representation for module `\sg13g2_decap_4'.
Generating RTLIL representation for module `\sg13g2_decap_8'.
Generating RTLIL representation for module `\sg13g2_dfrbp_1'.
Generating RTLIL representation for module `\sg13g2_dfrbp_2'.
Generating RTLIL representation for module `\sg13g2_dfrbpq_1'.
Generating RTLIL representation for module `\sg13g2_dfrbpq_2'.
Generating RTLIL representation for module `\sg13g2_dlhq_1'.
Generating RTLIL representation for module `\sg13g2_dlhr_1'.
Generating RTLIL representation for module `\sg13g2_dlhrq_1'.
Generating RTLIL representation for module `\sg13g2_dllr_1'.
Generating RTLIL representation for module `\sg13g2_dllrq_1'.
Generating RTLIL representation for module `\sg13g2_dlygate4sd1_1'.
Generating RTLIL representation for module `\sg13g2_dlygate4sd2_1'.
Generating RTLIL representation for module `\sg13g2_dlygate4sd3_1'.
Generating RTLIL representation for module `\sg13g2_ebufn_2'.
Generating RTLIL representation for module `\sg13g2_ebufn_4'.
Generating RTLIL representation for module `\sg13g2_ebufn_8'.
Generating RTLIL representation for module `\sg13g2_einvn_2'.
Generating RTLIL representation for module `\sg13g2_einvn_4'.
Generating RTLIL representation for module `\sg13g2_einvn_8'.
Generating RTLIL representation for module `\sg13g2_fill_1'.
Generating RTLIL representation for module `\sg13g2_fill_2'.
Generating RTLIL representation for module `\sg13g2_fill_4'.
Generating RTLIL representation for module `\sg13g2_fill_8'.
Generating RTLIL representation for module `\sg13g2_inv_1'.
Generating RTLIL representation for module `\sg13g2_inv_16'.
Generating RTLIL representation for module `\sg13g2_inv_2'.
Generating RTLIL representation for module `\sg13g2_inv_4'.
Generating RTLIL representation for module `\sg13g2_inv_8'.
Generating RTLIL representation for module `\sg13g2_lgcp_1'.
Generating RTLIL representation for module `\sg13g2_mux2_1'.
Generating RTLIL representation for module `\sg13g2_mux2_2'.
Generating RTLIL representation for module `\sg13g2_mux4_1'.
Generating RTLIL representation for module `\sg13g2_nand2_1'.
Generating RTLIL representation for module `\sg13g2_nand2_2'.
Generating RTLIL representation for module `\sg13g2_nand2b_1'.
Generating RTLIL representation for module `\sg13g2_nand2b_2'.
Generating RTLIL representation for module `\sg13g2_nand3_1'.
Generating RTLIL representation for module `\sg13g2_nand3b_1'.
Generating RTLIL representation for module `\sg13g2_nand4_1'.
Generating RTLIL representation for module `\sg13g2_nor2_1'.
Generating RTLIL representation for module `\sg13g2_nor2_2'.
Generating RTLIL representation for module `\sg13g2_nor2b_1'.
Generating RTLIL representation for module `\sg13g2_nor2b_2'.
Generating RTLIL representation for module `\sg13g2_nor3_1'.
Generating RTLIL representation for module `\sg13g2_nor3_2'.
Generating RTLIL representation for module `\sg13g2_nor4_1'.
Generating RTLIL representation for module `\sg13g2_nor4_2'.
Generating RTLIL representation for module `\sg13g2_o21ai_1'.
Generating RTLIL representation for module `\sg13g2_or2_1'.
Generating RTLIL representation for module `\sg13g2_or2_2'.
Generating RTLIL representation for module `\sg13g2_or3_1'.
Generating RTLIL representation for module `\sg13g2_or3_2'.
Generating RTLIL representation for module `\sg13g2_or4_1'.
Generating RTLIL representation for module `\sg13g2_or4_2'.
Generating RTLIL representation for module `\sg13g2_sdfbbp_1'.
Generating RTLIL representation for module `\sg13g2_sdfrbp_1'.
Generating RTLIL representation for module `\sg13g2_sdfrbp_2'.
Generating RTLIL representation for module `\sg13g2_sdfrbpq_1'.
Generating RTLIL representation for module `\sg13g2_sdfrbpq_2'.
Generating RTLIL representation for module `\sg13g2_sighold'.
Generating RTLIL representation for module `\sg13g2_slgcp_1'.
Generating RTLIL representation for module `\sg13g2_tiehi'.
Generating RTLIL representation for module `\sg13g2_tielo'.
Generating RTLIL representation for module `\sg13g2_xnor2_1'.
Generating RTLIL representation for module `\sg13g2_xor2_1'.
Successfully finished Verilog frontend.
wtaf

2. Executing Verilog-2005 frontend: /home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/heichips25_template.sv
Parsing SystemVerilog input from `/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/heichips25_template.sv' to AST representation.
Storing AST representation for module `$abstract\adder'.
Storing AST representation for module `$abstract\clock'.
Storing AST representation for module `$abstract\controller'.
Storing AST representation for module `$abstract\ir'.
Storing AST representation for module `$abstract\memory'.
Storing AST representation for module `$abstract\pc'.
Storing AST representation for module `$abstract\reg_a'.
Storing AST representation for module `$abstract\reg_b'.
Storing AST representation for module `$abstract\top'.
Storing AST representation for module `$abstract\heichips25_template'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\heichips25_template'.
Generating RTLIL representation for module `\heichips25_template'.

4.1. Analyzing design hierarchy..
Top module:  \heichips25_template

4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\top'.
Generating RTLIL representation for module `\top'.

4.3. Analyzing design hierarchy..
Top module:  \heichips25_template
Used module:     \top

4.4. Executing AST frontend in derive mode using pre-parsed AST for module `\controller'.
Generating RTLIL representation for module `\controller'.

4.5. Executing AST frontend in derive mode using pre-parsed AST for module `\ir'.
Generating RTLIL representation for module `\ir'.

4.6. Executing AST frontend in derive mode using pre-parsed AST for module `\adder'.
Generating RTLIL representation for module `\adder'.

4.7. Executing AST frontend in derive mode using pre-parsed AST for module `\reg_b'.
Generating RTLIL representation for module `\reg_b'.

4.8. Executing AST frontend in derive mode using pre-parsed AST for module `\reg_a'.
Generating RTLIL representation for module `\reg_a'.

4.9. Executing AST frontend in derive mode using pre-parsed AST for module `\memory'.
Generating RTLIL representation for module `\memory'.

4.10. Executing AST frontend in derive mode using pre-parsed AST for module `\pc'.
Generating RTLIL representation for module `\pc'.

4.11. Executing AST frontend in derive mode using pre-parsed AST for module `\clock'.
Generating RTLIL representation for module `\clock'.

4.12. Analyzing design hierarchy..
Top module:  \heichips25_template
Used module:     \top
Used module:         \controller
Used module:         \ir
Used module:         \adder
Used module:         \reg_b
Used module:         \reg_a
Used module:         \memory
Used module:         \pc
Used module:         \clock

4.13. Analyzing design hierarchy..
Top module:  \heichips25_template
Used module:     \top
Used module:         \controller
Used module:         \ir
Used module:         \adder
Used module:         \reg_b
Used module:         \reg_a
Used module:         \memory
Used module:         \pc
Used module:         \clock
Removing unused module `$abstract\heichips25_template'.
Removing unused module `$abstract\top'.
Removing unused module `$abstract\reg_b'.
Removing unused module `$abstract\reg_a'.
Removing unused module `$abstract\pc'.
Removing unused module `$abstract\memory'.
Removing unused module `$abstract\ir'.
Removing unused module `$abstract\controller'.
Removing unused module `$abstract\clock'.
Removing unused module `$abstract\adder'.
Removed 10 unused modules.
Renaming module heichips25_template to heichips25_template.

5. Executing PROC pass (convert processes to netlists).

5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/pc.v:10$15 in module pc.
Marked 1 switch rules as full_case in process $proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/memory.v:18$13 in module memory.
Marked 1 switch rules as full_case in process $proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/reg_a.v:11$12 in module reg_a.
Marked 1 switch rules as full_case in process $proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/reg_b.v:11$11 in module reg_b.
Marked 1 switch rules as full_case in process $proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/ir.v:11$7 in module ir.
Marked 4 switch rules as full_case in process $proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/controller.v:41$6 in module controller.
Marked 2 switch rules as full_case in process $proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/controller.v:29$3 in module controller.
Marked 5 switch rules as full_case in process $proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/top.v:34$2 in module top.
Removed a total of 0 dead cases.

5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 4 assignments to connections.

5.4. Executing PROC_INIT pass (extract init attributes).

5.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\pc.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/pc.v:10$15'.
Found async reset \rst in `\memory.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/memory.v:18$13'.
Found async reset \rst in `\reg_a.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/reg_a.v:11$12'.
Found async reset \rst in `\reg_b.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/reg_b.v:11$11'.
Found async reset \rst in `\ir.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/ir.v:11$7'.
Found async reset \rst in `\controller.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/controller.v:29$3'.

5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~15 debug messages>

5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\pc.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/pc.v:10$15'.
     1/1: $0\pc[3:0]
Creating decoders for process `\memory.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/memory.v:18$13'.
     1/1: $0\mar[3:0]
Creating decoders for process `\reg_a.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/reg_a.v:11$12'.
     1/1: $0\reg_a[7:0]
Creating decoders for process `\reg_b.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/reg_b.v:11$11'.
     1/1: $0\reg_b[7:0]
Creating decoders for process `\ir.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/ir.v:11$7'.
     1/1: $0\ir[7:0]
Creating decoders for process `\controller.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/controller.v:41$6'.
     1/19: $2\ctrl_word[11:4] [7]
     2/19: $10\ctrl_word[4:4]
     3/19: $9\ctrl_word[1:0] [0]
     4/19: $2\ctrl_word[11:4] [6]
     5/19: $8\ctrl_word[7:7]
     6/19: $6\ctrl_word[2:2]
     7/19: $2\ctrl_word[11:4] [5]
     8/19: $9\ctrl_word[1:0] [1]
     9/19: $3\ctrl_word[5:5]
    10/19: $5\ctrl_word[11:11]
    11/19: $2\ctrl_word[11:4] [3]
    12/19: $1\ctrl_word[2:0] [2]
    13/19: $1\ctrl_word[2:0] [1:0]
    14/19: $7\ctrl_word[4:4]
    15/19: $2\ctrl_word[11:4] [1]
    16/19: $2\ctrl_word[11:4] [2]
    17/19: $2\ctrl_word[11:4] [4]
    18/19: $2\ctrl_word[11:4] [0]
    19/19: $4\ctrl_word[8:8]
Creating decoders for process `\controller.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/controller.v:29$3'.
     1/1: $0\stage[2:0]
Creating decoders for process `\top.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/top.v:34$2'.
     1/5: $5\bus[7:0]
     2/5: $4\bus[7:0]
     3/5: $3\bus[7:0]
     4/5: $2\bus[7:0]
     5/5: $1\bus[7:0]

5.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\controller.\ctrl_word' from process `\controller.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/controller.v:41$6'.
No latch inferred for signal `\top.\bus' from process `\top.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/top.v:34$2'.

5.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\pc.\pc' using process `\pc.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/pc.v:10$15'.
  created $adff cell `$procdff$207' with positive edge clock and positive level reset.
Creating register for signal `\memory.\mar' using process `\memory.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/memory.v:18$13'.
  created $adff cell `$procdff$210' with positive edge clock and positive level reset.
Creating register for signal `\reg_a.\reg_a' using process `\reg_a.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/reg_a.v:11$12'.
  created $adff cell `$procdff$213' with positive edge clock and positive level reset.
Creating register for signal `\reg_b.\reg_b' using process `\reg_b.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/reg_b.v:11$11'.
  created $adff cell `$procdff$216' with positive edge clock and positive level reset.
Creating register for signal `\ir.\ir' using process `\ir.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/ir.v:11$7'.
  created $adff cell `$procdff$219' with positive edge clock and positive level reset.
Creating register for signal `\controller.\stage' using process `\controller.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/controller.v:29$3'.
  created $adff cell `$procdff$222' with negative edge clock and positive level reset.

5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\pc.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/pc.v:10$15'.
Removing empty process `pc.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/pc.v:10$15'.
Found and cleaned up 1 empty switch in `\memory.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/memory.v:18$13'.
Removing empty process `memory.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/memory.v:18$13'.
Found and cleaned up 1 empty switch in `\reg_a.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/reg_a.v:11$12'.
Removing empty process `reg_a.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/reg_a.v:11$12'.
Found and cleaned up 1 empty switch in `\reg_b.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/reg_b.v:11$11'.
Removing empty process `reg_b.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/reg_b.v:11$11'.
Found and cleaned up 1 empty switch in `\ir.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/ir.v:11$7'.
Removing empty process `ir.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/ir.v:11$7'.
Found and cleaned up 4 empty switches in `\controller.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/controller.v:41$6'.
Removing empty process `controller.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/controller.v:41$6'.
Found and cleaned up 1 empty switch in `\controller.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/controller.v:29$3'.
Removing empty process `controller.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/controller.v:29$3'.
Found and cleaned up 5 empty switches in `\top.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/top.v:34$2'.
Removing empty process `top.$proc$/home/user/Documents/heiChips2025_project/sap_1/heichips25-template/src/top.v:34$2'.
Cleaned up 15 empty switches.

5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module heichips25_template.
Optimizing module pc.
<suppressed ~1 debug messages>
Optimizing module memory.
<suppressed ~1 debug messages>
Optimizing module reg_a.
<suppressed ~1 debug messages>
Optimizing module reg_b.
<suppressed ~1 debug messages>
Optimizing module adder.
Optimizing module ir.
<suppressed ~1 debug messages>
Optimizing module controller.
<suppressed ~7 debug messages>
Optimizing module top.
Optimizing module clock.

6. Executing FLATTEN pass (flatten design).
Deleting now unused module pc.
Deleting now unused module memory.
Deleting now unused module reg_a.
Deleting now unused module reg_b.
Deleting now unused module adder.
Deleting now unused module ir.
Deleting now unused module controller.
Deleting now unused module top.
Deleting now unused module clock.
<suppressed ~9 debug messages>

7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \heichips25_template..
Removed 10 unused cells and 112 unused wires.
<suppressed ~57 debug messages>
